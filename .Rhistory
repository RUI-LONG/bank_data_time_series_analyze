if(!exists("foo", mode="function")) source("E:/bank_data_time_series_analyze/ggTimeSeries-master/R/ggplot_waterfall.R")
if(!exists("foo", mode="function")) source("E:/bank_data_time_series_analyze/ggTimeSeries-master/R/stat_steamgraph.R")
### change "107年12月" to "107-12"
AD_convert <- function(date){
date <- gsub("月","",gsub("年","/",date))
return(date)
}
Taipei_convert <- function(city){
city <- gsub("台北市","Taipei",city)
return(city)
}
merged_data = rbind(data_mct, data_loc)
Taipei <- merged_data[grep("台北市", merged_data$地區), ]
N_Taipei <- merged_data[grep("新北市", merged_data$地區), ]
Taoyuan <- merged_data[grep("桃園市", merged_data$地區), ]
Taichung <- merged_data[grep("台中市", merged_data$地區), ]
Tainan <- merged_data[grep("台南市", merged_data$地區), ]
Kaohsiung <- merged_data[grep("高雄市", merged_data$地區), ]
merged_data[,2] <- apply(merged_data[,2],1,FUN=Taipei_convert)
Taipei[,1] <- apply(Taipei[,1],1,FUN=AD_convert)
N_Taipei[,1] <- apply(N_Taipei[,1],1,FUN=AD_convert)
Taoyuan[,1] <- apply(Taoyuan[,1],1,FUN=AD_convert)
Taichung[,1] <- apply(Taichung[,1],1,FUN=AD_convert)
Tainan[,1] <- apply(Tainan[,1],1,FUN=AD_convert)
Kaohsiung[,1] <- apply(Kaohsiung[,1],1,FUN=AD_convert)
# Convert title to null
names(Taipei) <- NULL
names(N_Taipei) <- NULL
names(Taoyuan) <- NULL
names(Taichung) <- NULL
names(Tainan) <- NULL
names(Kaohsiung) <- NULL
set.seed(1)
data <- data.frame(EmpNum = merged_data[,2], Sym = merged_data[,5],
dp1 = merged_data[, 3], dp2 = merged_data[, 4])
#View(merged_data)
data <- data.frame(EmpNum = rep(seq(500), each = 5), Sym = rep(c("A", "B", "C", "D", "E"), 500), dp1 = runif(500), dp2 = runif(500), dp3 = runif(500))
View(Taipei)
dtData = data.frame(
Time = 1:61,
Signal =
c(
as.numeric(as.character(unlist(Taipei[1:61,4]))),
as.numeric(as.character(unlist(N_Taipei[1:61,4]))),
as.numeric(as.character(unlist(Taoyuan[1:61,4]))),
as.numeric(as.character(unlist(Taichung[1:61,4]))),
as.numeric(as.character(unlist(Tainan[1:61,4]))),
as.numeric(as.character(unlist(Kaohsiung[1:61,4])))
),
VariableLabel = c(rep('臺北市', 61),
rep('新北市', 61), rep('桃園市', 61),
rep('台中市', 61), rep('台南市', 61),
rep('高雄市', 61))
)
shinyServer (
function (input,output,session){
output$employee <- renderUI({
selectInput("Employee", "Please Select An Employee Number:",
choices = c('1','3','5'))
})
output$symbol <- renderUI({
if (!is.null(input$Employee)){
selectInput ("Symbol", "Please Select Salary Symbol:",
choices = sort(unique(data[data$EmpNum == input$Employee, ]$Sym)))
}
})
output$plots <- renderPlot({
dfData = data.frame(x = 1:61,
y = Taipei[,int(input$Employee)])
p1 = ggplot_waterfall(
dtData = dfData,
'x',
'y'
)
p1 +
xlab('時間') +
ylab('筆數')
})
})
library(xts)
library(Rcpp)
library(shiny)
library(tidyr)
library(dplyr)
library(readxl)
library(stringr)
library(ggplot2)
library(TSstudio)
library(data.table)
setwd('E:/bank_data_time_series_analyze')
data_loc <- read_excel("BANK_LOC_ALL_EL.xlsx")
data_mct <- read_excel("BANK_MCT_ALL_EL.xlsx")
if(!exists("foo", mode="function")) source("E:/bank_data_time_series_analyze/ggTimeSeries-master/R/ggplot_waterfall.R")
if(!exists("foo", mode="function")) source("E:/bank_data_time_series_analyze/ggTimeSeries-master/R/stat_steamgraph.R")
### change "107年12月" to "107-12"
AD_convert <- function(date){
date <- gsub("月","",gsub("年","/",date))
return(date)
}
Taipei_convert <- function(city){
city <- gsub("台北市","Taipei",city)
return(city)
}
merged_data = rbind(data_mct, data_loc)
Taipei <- merged_data[grep("台北市", merged_data$地區), ]
N_Taipei <- merged_data[grep("新北市", merged_data$地區), ]
Taoyuan <- merged_data[grep("桃園市", merged_data$地區), ]
Taichung <- merged_data[grep("台中市", merged_data$地區), ]
Tainan <- merged_data[grep("台南市", merged_data$地區), ]
Kaohsiung <- merged_data[grep("高雄市", merged_data$地區), ]
merged_data[,2] <- apply(merged_data[,2],1,FUN=Taipei_convert)
Taipei[,1] <- apply(Taipei[,1],1,FUN=AD_convert)
N_Taipei[,1] <- apply(N_Taipei[,1],1,FUN=AD_convert)
Taoyuan[,1] <- apply(Taoyuan[,1],1,FUN=AD_convert)
Taichung[,1] <- apply(Taichung[,1],1,FUN=AD_convert)
Tainan[,1] <- apply(Tainan[,1],1,FUN=AD_convert)
Kaohsiung[,1] <- apply(Kaohsiung[,1],1,FUN=AD_convert)
# Convert title to null
names(Taipei) <- NULL
names(N_Taipei) <- NULL
names(Taoyuan) <- NULL
names(Taichung) <- NULL
names(Tainan) <- NULL
names(Kaohsiung) <- NULL
set.seed(1)
data <- data.frame(EmpNum = merged_data[,2], Sym = merged_data[,5],
dp1 = merged_data[, 3], dp2 = merged_data[, 4])
#View(merged_data)
data <- data.frame(EmpNum = rep(seq(500), each = 5), Sym = rep(c("A", "B", "C", "D", "E"), 500), dp1 = runif(500), dp2 = runif(500), dp3 = runif(500))
View(Taipei)
dtData = data.frame(
Time = 1:61,
Signal =
c(
as.numeric(as.character(unlist(Taipei[1:61,4]))),
as.numeric(as.character(unlist(N_Taipei[1:61,4]))),
as.numeric(as.character(unlist(Taoyuan[1:61,4]))),
as.numeric(as.character(unlist(Taichung[1:61,4]))),
as.numeric(as.character(unlist(Tainan[1:61,4]))),
as.numeric(as.character(unlist(Kaohsiung[1:61,4])))
),
VariableLabel = c(rep('臺北市', 61),
rep('新北市', 61), rep('桃園市', 61),
rep('台中市', 61), rep('台南市', 61),
rep('高雄市', 61))
)
shinyServer (
function (input,output,session){
output$employee <- renderUI({
selectInput("Employee", "Please Select An Employee Number:",
choices = c('1','3','5'))
})
output$symbol <- renderUI({
if (!is.null(input$Employee)){
selectInput ("Symbol", "Please Select Salary Symbol:",
choices = sort(unique(data[data$EmpNum == input$Employee, ]$Sym)))
}
})
output$plots <- renderPlot({
dfData = data.frame(x = 1:61,
y = Taipei[,int(input$Employee)])
p1 = ggplot_waterfall(
dtData = dfData,
'x',
'y'
)
p1 +
xlab('時間') +
ylab('筆數')
})
})
runApp("E:/bank_data_time_series_analyze")
runApp("E:/bank_data_time_series_analyze")
runApp("E:/bank_data_time_series_analyze")
runApp("E:/bank_data_time_series_analyze")
runApp("E:/bank_data_time_series_analyze")
runApp("E:/bank_data_time_series_analyze")
runApp("E:/bank_data_time_series_analyze")
runApp("E:/bank_data_time_series_analyze")
runApp("E:/bank_data_time_series_analyze")
runApp("E:/bank_data_time_series_analyze")
runApp("E:/bank_data_time_series_analyze")
Taipei[1:61,3]
runApp("E:/bank_data_time_series_analyze")
runApp("E:/bank_data_time_series_analyze")
runApp("E:/bank_data_time_series_analyze")
runApp("E:/bank_data_time_series_analyze")
runApp("E:/bank_data_time_series_analyze")
runApp("E:/bank_data_time_series_analyze")
runApp("E:/bank_data_time_series_analyze")
runApp("E:/bank_data_time_series_analyze")
runApp("E:/bank_data_time_series_analyze")
y = Taipei[,3]
View(y)
View(y)
runApp("E:/bank_data_time_series_analyze")
runApp("E:/bank_data_time_series_analyze")
runApp("E:/bank_data_time_series_analyze")
runApp("E:/bank_data_time_series_analyze")
View(names(Taipei[,0]))
View(names(Taipei))
library(xts)
library(Rcpp)
library(shiny)
library(tidyr)
library(dplyr)
library(readxl)
library(stringr)
library(ggplot2)
library(TSstudio)
library(data.table)
setwd('E:/bank_data_time_series_analyze')
data_loc <- read_excel("BANK_LOC_ALL_EL.xlsx")
data_mct <- read_excel("BANK_MCT_ALL_EL.xlsx")
if(!exists("foo", mode="function")) source("E:/bank_data_time_series_analyze/ggTimeSeries-master/R/ggplot_waterfall.R")
if(!exists("foo", mode="function")) source("E:/bank_data_time_series_analyze/ggTimeSeries-master/R/stat_steamgraph.R")
### change "107年12月" to "107-12"
AD_convert <- function(date){
date <- gsub("月","",gsub("年","/",date))
return(date)
}
Taipei_convert <- function(city){
city <- gsub("台北市","Taipei",city)
return(city)
}
merged_data = rbind(data_mct, data_loc)
merged_data[,2] <- apply(merged_data[,2],1,FUN=Taipei_convert)
Taipei <- merged_data[grep("台北市", merged_data$地區), ]
N_Taipei <- merged_data[grep("新北市", merged_data$地區), ]
Taoyuan <- merged_data[grep("桃園市", merged_data$地區), ]
Taichung <- merged_data[grep("台中市", merged_data$地區), ]
Tainan <- merged_data[grep("台南市", merged_data$地區), ]
Kaohsiung <- merged_data[grep("高雄市", merged_data$地區), ]
Taipei[,1] <- apply(Taipei[,1],1,FUN=AD_convert)
N_Taipei[,1] <- apply(N_Taipei[,1],1,FUN=AD_convert)
Taoyuan[,1] <- apply(Taoyuan[,1],1,FUN=AD_convert)
Taichung[,1] <- apply(Taichung[,1],1,FUN=AD_convert)
Tainan[,1] <- apply(Tainan[,1],1,FUN=AD_convert)
Kaohsiung[,1] <- apply(Kaohsiung[,1],1,FUN=AD_convert)
# Convert title to null
#names(Taipei) <- NULL
names(N_Taipei) <- NULL
names(Taoyuan) <- NULL
names(Taichung) <- NULL
names(Tainan) <- NULL
names(Kaohsiung) <- NULL
set.seed(1)
data <- data.frame(EmpNum = merged_data[,2], Sym = merged_data[,5],
dp1 = merged_data[, 3], dp2 = merged_data[, 4])
#View(merged_data)
data <- data.frame(EmpNum = rep(seq(500), each = 5), Sym = rep(c("A", "B", "C", "D", "E"), 500), dp1 = runif(500), dp2 = runif(500), dp3 = runif(500))
dtData = data.frame(
Time = 1:61,
Signal =
c(
as.numeric(as.character(unlist(Taipei[1:61,4]))),
as.numeric(as.character(unlist(N_Taipei[1:61,4]))),
as.numeric(as.character(unlist(Taoyuan[1:61,4]))),
as.numeric(as.character(unlist(Taichung[1:61,4]))),
as.numeric(as.character(unlist(Tainan[1:61,4]))),
as.numeric(as.character(unlist(Kaohsiung[1:61,4])))
),
VariableLabel = c(rep('臺北市', 61),
rep('新北市', 61), rep('桃園市', 61),
rep('台中市', 61), rep('台南市', 61),
rep('高雄市', 61))
)
View(names(Taipei))
shinyServer (
function (input,output,session){
output$employee <- renderUI({
selectInput("Employee", "Please Select An Employee Number:",
choices = names(Taipei[,0]))
})
output$symbol <- renderUI({
if (!is.null(input$Employee)){
selectInput ("Symbol", "Please Select Salary Symbol:",
choices = sort(unique(data[data$EmpNum == input$Employee, ]$Sym)))
}
})
output$plots <- renderPlot({
if (!is.null(input$Employee)){
dfData = data.frame(x = 1:61,
y = Taipei[,input$Employee])
p1 = ggplot_waterfall(
dtData = dfData,
'x',
'y'
)
p1 +
xlab('時間') +
ylab('筆數')
}
})
})
runApp("E:/bank_data_time_series_analyze")
runApp("E:/bank_data_time_series_analyze")
View(Taipei[,'年月'])
# Convert title to null
names(Taipei) <- 1:length(Taipei)
# Convert title to null
names(Taipei) <- c(1:length(Taipei))
View(names(Taipei))
runApp("E:/bank_data_time_series_analyze")
runApp("E:/bank_data_time_series_analyze")
runApp("E:/bank_data_time_series_analyze")
require(reshape2)
runApp("E:/bank_data_time_series_analyze")
runApp("E:/bank_data_time_series_analyze")
runApp("E:/bank_data_time_series_analyze")
runApp("E:/bank_data_time_series_analyze")
runApp("E:/bank_data_time_series_analyze")
runApp("E:/bank_data_time_series_analyze")
runApp("E:/bank_data_time_series_analyze")
runApp("E:/bank_data_time_series_analyze")
library(xts)
library(Rcpp)
library(shiny)
library(tidyr)
library(dplyr)
library(readxl)
library(stringr)
library(ggplot2)
library(TSstudio)
library(data.table)
setwd('E:/bank_data_time_series_analyze')
data_loc <- read_excel("BANK_LOC_ALL_EL.xlsx")
data_mct <- read_excel("BANK_MCT_ALL_EL.xlsx")
if(!exists("foo", mode="function")) source("E:/bank_data_time_series_analyze/ggTimeSeries-master/R/ggplot_waterfall.R")
if(!exists("foo", mode="function")) source("E:/bank_data_time_series_analyze/ggTimeSeries-master/R/stat_steamgraph.R")
### change "107年12月" to "107-12"
AD_convert <- function(date){
date <- gsub("月","",gsub("年","/",date))
return(date)
}
Taipei_convert <- function(city){
city <- gsub("台北市","Taipei",city)
return(city)
}
merged_data = rbind(data_mct, data_loc)
merged_data[,2] <- apply(merged_data[,2],1,FUN=Taipei_convert)
Taipei <- merged_data[grep("台北市", merged_data$地區), ]
N_Taipei <- merged_data[grep("新北市", merged_data$地區), ]
Taoyuan <- merged_data[grep("桃園市", merged_data$地區), ]
Taichung <- merged_data[grep("台中市", merged_data$地區), ]
Tainan <- merged_data[grep("台南市", merged_data$地區), ]
Kaohsiung <- merged_data[grep("高雄市", merged_data$地區), ]
Taipei[,1] <- apply(Taipei[,1],1,FUN=AD_convert)
N_Taipei[,1] <- apply(N_Taipei[,1],1,FUN=AD_convert)
Taoyuan[,1] <- apply(Taoyuan[,1],1,FUN=AD_convert)
Taichung[,1] <- apply(Taichung[,1],1,FUN=AD_convert)
Tainan[,1] <- apply(Tainan[,1],1,FUN=AD_convert)
Kaohsiung[,1] <- apply(Kaohsiung[,1],1,FUN=AD_convert)
# Convert title to null
names(Taipei) <- c(1:length(Taipei))
names(N_Taipei) <- NULL
names(Taoyuan) <- NULL
names(Taichung) <- NULL
names(Tainan) <- NULL
names(Kaohsiung) <- NULL
set.seed(1)
data <- data.frame(EmpNum = merged_data[,2], Sym = merged_data[,5],
dp1 = merged_data[, 3], dp2 = merged_data[, 4])
#View(merged_data)
data <- data.frame(EmpNum = rep(seq(500), each = 5), Sym = rep(c("A", "B", "C", "D", "E"), 500), dp1 = runif(500), dp2 = runif(500), dp3 = runif(500))
dtData = data.frame(
Time = 1:61,
Signal =
c(
as.numeric(as.character(unlist(Taipei[1:61,4]))),
as.numeric(as.character(unlist(N_Taipei[1:61,4]))),
as.numeric(as.character(unlist(Taoyuan[1:61,4]))),
as.numeric(as.character(unlist(Taichung[1:61,4]))),
as.numeric(as.character(unlist(Tainan[1:61,4]))),
as.numeric(as.character(unlist(Kaohsiung[1:61,4])))
),
VariableLabel = c(rep('臺北市', 61),
rep('新北市', 61), rep('桃園市', 61),
rep('台中市', 61), rep('台南市', 61),
rep('高雄市', 61))
)
shinyServer (
function (input,output,session){
output$employee <- renderUI({
selectInput("Employee", "Please Select An Employee Number:",
choices = c(1,'2', '5'))
})
output$symbol <- renderUI({
if (!is.null(input$Employee)){
selectInput ("Symbol", "Please Select Salary Symbol:",
choices = sort(unique(data[data$EmpNum == input$Employee, ]$Sym)))
}
})
output$plots <- renderPlot({
dfData = data.frame(x = 1:61,
y = Taipei[1:61,3])
p1 = ggplot_waterfall(
dtData = dfData,
'x',
'y'
)
p1 +
xlab('時間') +
ylab('筆數')
})
})
runApp("E:/bank_data_time_series_analyze")
runApp("E:/bank_data_time_series_analyze")
runApp("E:/bank_data_time_series_analyze")
runApp("E:/bank_data_time_series_analyze")
runApp("E:/bank_data_time_series_analyze")
library(xts)
library(Rcpp)
library(shiny)
library(tidyr)
library(dplyr)
library(readxl)
library(stringr)
library(ggplot2)
library(TSstudio)
library(data.table)
setwd('E:/bank_data_time_series_analyze')
data_loc <- read_excel("BANK_LOC_ALL_EL.xlsx")
data_mct <- read_excel("BANK_MCT_ALL_EL.xlsx")
if(!exists("foo", mode="function")) source("E:/bank_data_time_series_analyze/ggTimeSeries-master/R/ggplot_waterfall.R")
if(!exists("foo", mode="function")) source("E:/bank_data_time_series_analyze/ggTimeSeries-master/R/stat_steamgraph.R")
### change "107年12月" to "107-12"
AD_convert <- function(date){
date <- gsub("月","",gsub("年","/",date))
return(date)
}
Taipei_convert <- function(city){
city <- gsub("台北市","Taipei",city)
return(city)
}
merged_data = rbind(data_mct, data_loc)
merged_data[,2] <- apply(merged_data[,2],1,FUN=Taipei_convert)
Taipei <- merged_data[grep("台北市", merged_data$地區), ]
N_Taipei <- merged_data[grep("新北市", merged_data$地區), ]
Taoyuan <- merged_data[grep("桃園市", merged_data$地區), ]
Taichung <- merged_data[grep("台中市", merged_data$地區), ]
Tainan <- merged_data[grep("台南市", merged_data$地區), ]
Kaohsiung <- merged_data[grep("高雄市", merged_data$地區), ]
Taipei[,1] <- apply(Taipei[,1],1,FUN=AD_convert)
N_Taipei[,1] <- apply(N_Taipei[,1],1,FUN=AD_convert)
Taoyuan[,1] <- apply(Taoyuan[,1],1,FUN=AD_convert)
Taichung[,1] <- apply(Taichung[,1],1,FUN=AD_convert)
Tainan[,1] <- apply(Tainan[,1],1,FUN=AD_convert)
Kaohsiung[,1] <- apply(Kaohsiung[,1],1,FUN=AD_convert)
# Convert title to null
names(Taipei) <- c(1:length(Taipei))
names(N_Taipei) <- NULL
names(Taoyuan) <- NULL
names(Taichung) <- NULL
names(Tainan) <- NULL
names(Kaohsiung) <- NULL
set.seed(1)
data <- data.frame(EmpNum = merged_data[,2], Sym = merged_data[,5],
dp1 = merged_data[, 3], dp2 = merged_data[, 4])
#View(merged_data)
data <- data.frame(EmpNum = rep(seq(500), each = 5), Sym = rep(c("A", "B", "C", "D", "E"), 500), dp1 = runif(500), dp2 = runif(500), dp3 = runif(500))
dtData = data.frame(
Time = 1:61,
Signal =
c(
as.numeric(as.character(unlist(Taipei[1:61,4]))),
as.numeric(as.character(unlist(N_Taipei[1:61,4]))),
as.numeric(as.character(unlist(Taoyuan[1:61,4]))),
as.numeric(as.character(unlist(Taichung[1:61,4]))),
as.numeric(as.character(unlist(Tainan[1:61,4]))),
as.numeric(as.character(unlist(Kaohsiung[1:61,4])))
),
VariableLabel = c(rep('臺北市', 61),
rep('新北市', 61), rep('桃園市', 61),
rep('台中市', 61), rep('台南市', 61),
rep('高雄市', 61))
)
shinyServer (
function (input,output,session){
output$employee <- renderUI({
selectInput("Employee", "Please Select An Employee Number:",
choices = c(1,87, 5))
})
output$symbol <- renderUI({
if (!is.null(input$Employee)){
selectInput ("Symbol", "Please Select Salary Symbol:",
choices = sort(unique(data[data$EmpNum == input$Employee, ]$Sym)))
}
})
output$plots <- renderPlot({
if (!is.null(input$Employee)){
dfData = data.frame(x = 1:61,
y = Taipei[,3])
p1 = ggplot_waterfall(
dtData = dfData,
'x',
'y'
)
p1 +
xlab('時間') +
ylab('筆數')
}
})
})
runApp("E:/bank_data_time_series_analyze")
runApp("E:/bank_data_time_series_analyze")
runApp("E:/bank_data_time_series_analyze")
runApp("E:/bank_data_time_series_analyze")
runApp("E:/bank_data_time_series_analyze")
runApp("E:/bank_data_time_series_analyze")
runApp("E:/bank_data_time_series_analyze")
runApp("E:/bank_data_time_series_analyze")
